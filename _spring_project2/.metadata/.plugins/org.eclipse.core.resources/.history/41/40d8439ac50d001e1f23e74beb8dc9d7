package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.Handler.FileHandler;
import com.myweb.www.Handler.PagingHandler;
import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.repository.UserDAO;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@Controller
public class BoardController {

	@Inject
	private BoardService bsv;

	@Inject
	private UserDAO udao;

	@Inject
	private FileHandler fhd;

	@GetMapping("/register")
	public String registerGet() {
		return "/board/register";
	}

	@PostMapping("/register")
	public String registerPost(BoardVO bvo, RedirectAttributes rAttr,
			@RequestParam(name = "files", required = false) MultipartFile[] files) {
		log.info(">>> bvo >" + bvo.toString());

		List<FileVO> flist = null;

		if (files[0].getSize() > 0) { // 데이터가 있다 라는 것을 의미
			// 파일 배열을 경로설정, fvo set 다 해서 리스트로 리턴
			flist = fhd.uploadFiles(files);
		} else {
			log.info("file null");
		}

		BoardDTO bdto = new BoardDTO(bvo, flist);
		int isOk = bsv.register(bdto);
		
//		int isOk = bsv.insert(bvo);
		log.info(">> board insert >> " + (isOk > 0 ? "OK" : "FAIL"));
		rAttr.addAttribute("isOk", isOk);
		return "redirect:/board/list";
	}

	@GetMapping("/list")
	public String listPost(Model m, PagingVO pvo) {
		log.info(">>> pagevo : " + pvo);
		List<BoardVO> list = bsv.list(pvo);
		m.addAttribute("list", list);
		int totalCount = bsv.totalCount(pvo);
		PagingHandler ph = new PagingHandler(pvo, totalCount);
		m.addAttribute("ph", ph);
		return "/board/list";
	}

	@GetMapping("/detail") // 왔던 형태에서 다시 돌아간다면 String말고 void 써도 됨
	public void detail(Model m, @RequestParam("bno") int bno) {
		log.info(">>> bno >" + bno);
//		BoardVO bvo = bsv.detail(bno);
	      BoardDTO bdto = bsv.detailFile(bno);
	      log.info("bdto>>"+bdto.getBvo());
	      log.info("bdto>>"+bdto.getFlist());
		int isOk = bsv.count(bno);
		log.info("count isOk >" + isOk);
		log.info(">>> count up > " + (isOk > 0 ? "success" : "Fail"));
//		m.addAttribute("bvo", bvo);
	      m.addAttribute("boardDTO", bdto);
	}

	@GetMapping("/modify")
	public void modify(Model m, @RequestParam("bno") int bno) {
		log.info(">>> bno >" + bno);
//		BoardVO bvo = bsv.modify(bno);
		BoardDTO bdto = bsv.modifyFile(bno); // 추가

//		m.addAttribute("bvo", bvo);
		m.addAttribute("boardDTO", bdto);
	}

	@PostMapping("/modify")
	public String edit(Model m, BoardVO bvo, RedirectAttributes rAttr,
			@RequestParam(name="files", required=false)MultipartFile[] files) {
		log.info(">>> bvo >" + bvo);
//		int isOk = bsv.edit(bvo);
		List<FileVO> flist = null;
		if(files[0].getSize()>0) {
			flist = fhd.uploadFiles(files);
		}
		BoardDTO bdto = new BoardDTO(bvo, flist);
		int isOk = bsv.editFile(bdto);
		m.addAttribute("bvo", bvo);
		return "redirect:/board/list";
	}

	@GetMapping("/delete")
	public String delete(@RequestParam("bno") int bno, RedirectAttributes rAttr, HttpServletRequest request) {
		log.info(">>> bno >" + bno);
		int isOk = bsv.delete(bno);
		log.info(">>> 글 삭제 >" + (isOk > 0 ? "성공" : "실패"));
		return "redirect:/board/list";
	}

}
