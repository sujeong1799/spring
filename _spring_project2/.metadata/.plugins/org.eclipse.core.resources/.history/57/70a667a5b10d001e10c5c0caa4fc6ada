package com.myweb.www.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardVO;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@Controller
public class BoardController {

	@Inject
	private BoardService bsv;

	@GetMapping("/register")
	public String registerGet() {
		return "/board/register";
	}

	@PostMapping("/register")
	public String registerPost(BoardVO bvo, RedirectAttributes rAttr) {
		log.info(">>> bvo >" + bvo.toString());
		int isOk = bsv.insert(bvo);
		log.info(">> board insert >> " + (isOk > 0 ? "OK" : "FAIL"));

		rAttr.addAttribute("isOk", isOk);
		return "redirect:/board/list";
	}

	@GetMapping("/list")
	public String listPost(Model m, PagingVO pvo) {
		// RedirectAttributes 객체사용 : 데이터의 새로고침
		List<BoardVO> list = bsv.list();
		m.addAttribute("list", list);
		int totalCount = bsv.getTotalCount(pvo);
		PagingHandler ph = new PagingHandler(pvo, totalCount);
		m.addAttribute("ph", ph);

		return "/board/list";
	}
	
	@GetMapping("/detail") // 왔던 형태에서 다시 돌아간다면 String말고 void 써도 됨 
	   public void detail(Model m, @RequestParam("bno")int bno) {
	      log.info(">>> bno >" + bno);
	      BoardVO bvo = bsv.detail(bno);
//	      BoardDTO bdto = bsv.detailFile(bno);
//	      log.info("bdto>>"+bdto.getBvo());
//	      log.info("bdto>>"+bdto.getFlist());
	      int isOk = bsv.count(bno);
	      log.info(">>> count up > " + (isOk > 0 ? "success" : "Fail"));
	      m.addAttribute("bvo", bvo);
//	      m.addAttribute("boardDTO", bdto);
	   }

}
